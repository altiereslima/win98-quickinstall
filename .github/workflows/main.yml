name: Build Win98 QuickInstall

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gcc-multilib \
          g++-multilib \
          nasm \
          mtools \
          dosfstools \
          syslinux \
          xz-utils \
          cpio \
          zip \
          autoconf \
          automake \
          libtool \
          flex \
          bison \
          libelf-dev \
          bc \
          ncurses-base

    - name: Create cross-compiler directory and setup terminfo
      run: |
        mkdir -p i486-linux-musl-cross/i486-linux-musl/share/terminfo/l
        # Procurar o arquivo linux em vários locais possíveis
        for path in \
          "/lib/terminfo/l/linux" \
          "/usr/lib/terminfo/l/linux" \
          "/usr/share/terminfo/l/linux" \
          "/etc/terminfo/l/linux"; do
          if [ -f "$path" ]; then
            cp "$path" i486-linux-musl-cross/i486-linux-musl/share/terminfo/l/
            break
          fi
        done
        # Verificar se o arquivo foi copiado
        if [ ! -f "i486-linux-musl-cross/i486-linux-musl/share/terminfo/l/linux" ]; then
          echo "Criando arquivo terminfo manualmente"
          touch i486-linux-musl-cross/i486-linux-musl/share/terminfo/l/linux
        fi

    - name: Build BusyBox
      run: |
        cd busybox
        chmod +x build.sh
        ./build.sh

    - name: Build Linux Kernel
      run: |
        cd linux
        cp ../buildscripts/linux_config.flp .config
        make -j$(nproc) bzImage
        cp arch/x86/boot/bzImage ../bzImage.flp
        cp ../buildscripts/linux_config.cd .config
        make -j$(nproc) bzImage
        cp arch/x86/boot/bzImage ../bzImage.cd

    - name: Build Components
      run: |
        components=("dosfstools" "syslinux" "util-linux" "tiny-floppy-bootloader" "installer" "dosflop" "pciutils")
        for component in "${components[@]}"; do
          cd $component
          chmod +x build.sh
          ./build.sh
          cd ..
        done

    - name: Create Output Structure
      run: |
        OUTPUT=$PWD/__BIN__
        CDROOT=$OUTPUT/cdromroot
        mkdir -p "$CDROOT/bin"
        mkdir -p "$OUTPUT/tools"
        mkdir -p "$OUTPUT/mercypak"
        mkdir -p "$OUTPUT/_DRIVER_"
        mkdir -p "$OUTPUT/_EXTRA_DRIVER_"

    - name: Package Files
      run: |
        OUTPUT=$PWD/__BIN__
        CDROOT=$OUTPUT/cdromroot
        
        # Copy kernels and bootloaders
        cp bzImage.cd "$CDROOT/"
        cp tiny-floppy-bootloader/cdrom.img "$CDROOT/"
        cp tiny-floppy-bootloader/floppy.img "$OUTPUT/"
        cp tiny-floppy-bootloader/floppy.img "$CDROOT/"
        cp dosflop/dosflop.img "$OUTPUT/"
        cp dosflop/dosflop.img "$CDROOT/"
        
        # Copy binaries
        cp util-linux/OUTPUT/bin/* "$CDROOT/bin/" || true
        cp util-linux/OUTPUT/sbin/* "$CDROOT/bin/" || true
        cp util-linux/{cfdisk,sfdisk,lsblk} "$CDROOT/bin/" || true
        cp pciutils/{lspci,setpci,pci.ids} "$CDROOT/bin/" || true
        cp dosfstools/OUTPUT/sbin/* "$CDROOT/bin/" || true
        
        # Copy configuration and tools
        cp supplement/syslinux.cfg "$CDROOT"
        cp supplement/install.txt "$CDROOT/"
        cp installer/lunmercy "$CDROOT/bin/"
        cp -r tools "$OUTPUT"
        
        # Copy SYSLINUX components
        cp syslinux/bios/mbr/mbr.bin "$OUTPUT/tools/syslinux_mbr.bin"
        objcopy -O binary -j .data syslinux/bios/linux/bootsect_bin.o "$OUTPUT/tools/syslinux_bs.bin"
        cp syslinux/bios/com32/elflink/ldlinux/ldlinux.c32 "$OUTPUT/tools"
        cp syslinux/bios/core/ldlinux.sys "$OUTPUT/tools"
        
        # Copy drivers and preparation files
        cp -r sysprep/* "$OUTPUT"
        cp -r win98-driver-lib-base/* "$OUTPUT/_DRIVER_"
        cp -r win98-driver-lib-extra/* "$OUTPUT/_EXTRA_DRIVER_"
        cp README.md "$OUTPUT"

    - name: Create Release Archive
      run: |
        VERSION=$(git describe --tags --always)
        cd __BIN__
        zip -r "../Windows98QuickInstall_${VERSION}.zip" ./

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows98QuickInstall
        path: Windows98QuickInstall_*.zip
        retention-days: 90

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: Windows98QuickInstall_*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
